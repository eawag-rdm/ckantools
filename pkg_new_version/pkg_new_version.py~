'''
Usage:
    pkg_new_version <old_pkg_url> [--title-prefix=<prefix>]
    pkg_new_version -h

Arguments:
    <old_pkg_url>   URL of pervious version of data package

Options:

    -t <prefix>, --title-prefix=<prefix>  Prefix for the title to indicate new version [default: [Version 2] ]

'''
import ckanapi
import docopt
import os
import re
import urllib

APIKEY = os.environ['CKAN_APIKEY_PROD1']
HOSTPAT = re.compile(r'^(https?://[^/]+\.[^/]+).*$')
SAFENAMECHARS = 'abcdefghijklmnopqrstuvwxyz0123456789_-'
NEW_VERSION = '2'
OLD_VERSIOn = '1'


def _getconn(url):
    host = re.match(HOSTPAT, url)
    try:
        host = host.group(1)
    except Exception as e:
        print("\nERROR: Can't figure out host for {}\n".format(url))
        raise e
    conn = ckanapi.RemoteCKAN(host, APIKEY)
    return conn

def _read_pkg(url, conn):
    ds_name = url.rsplit('/', 1)[1]
    pkg = conn.call_action('package_show', data_dict={'id': ds_name})
    return pkg

def _modify_pkg(pkg, titleprefix):
    def _safename(name):
        newname = ''
        for c in name:
            newname = newname + c if c in SAFENAMECHARS else newname
        return newname

    del pkg['id']
    pkg['title'] = titleprefix + pkg['title']
    name = pkg['title'].replace(' ', '_').lower()
    name = _safename(name)
    pkg['name'] = name[:99] if len(name) > 99 else name
    for r in pkg.get('resourcs', []):
        del r['revision_id']
        del r['id']

def _create_new_pkg(pkg, conn):
    print(pkg['name'])
    res = conn.call_action('package_create', data_dict=pkg)
    print(res)
        
def main(url, conn, titleprefix):
    pkg = _read_pkg(url, conn)
    _modify_pkg(pkg, titleprefix)
    _create_new_pkg(pkg, conn)

if __name__ == '__main__':
    args = docopt.docopt(__doc__)
    oldurl = args['<old_pkg_url>']
    titleprefix = args['--title-prefix']
    titleprefix = titleprefix if titleprefix[-1] == ' ' else  titleprefix + ' '
    conn = _getconn(oldurl)
    main(oldurl, conn, titleprefix)

# def modify_resource(res):
#     try:
#         del res['revision_id']
#     except KeyError:
#         pass
#     #res['id'] = str(uuid.uuid4())
#     del res['id']

# for r in res_orig:
#     modify_resource(r)


